version: "2.0"
services:
##
##_____MANAGEMENT_____
##____________________ Portainer [Management/Docker]
  portainer:
    container_name: portainer
    image: portainer/portainer
    restart: always
    environment:
      - TZ=$TZ
    command: -H unix:///var/run/docker.sock
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - $USERHOME/docker/portainer/data:/data
      - $USERHOME/docker/shared:/shared
##
##______NETWORK_______
##____________________ PiHole 2 (1st PiHole runs off-server) [NETWORK/recursive-dnsserver]
# create empty files first see docker-config.sh
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    restart: always
    mac_address: d0:ca:ab:cd:ef:01
    cap_add:
      - NET_ADMIN
    networks:
      DNS-network:
        ipv4_address: 192.168.88.3
    environment:
      ServerIP: 192.168.88.3
      WEBPASSWORD: $PW_INT
      PHP_ENV_CONFIG: "/etc/lighttpd/conf-enabled/15-fastcgi-php.conf"
      TZ: $TZ
      DNS1: 192.168.88.4#53
      DNS2: 127.0.0.1
    volumes:
      - $USERHOME/docker/pihole/dnsmasq.d:/etc/dnsmasq.d:rw
      - $USERHOME/docker/pihole:/etc/pihole:rw
      - /etc/localtime:/etc/localtime:ro
      - $USERHOME/docker/pihole/var-log/pihole.log:/var/log/pihole.log
    ports:
      - 443/tcp
      - 53/tcp
      - 53/udp
      - 67/udp
      - 80/tcp
    dns:
      - 127.0.0.1
      - 192.168.88.4#53
##____________________ Unbound [NETWORK/noads-dnsserver]
  unbound:
    container_name: unbound
    image: mvance/unbound:latest
    restart: always
    mac_address: d0:ca:ab:cd:ef:02
    networks:
      DNS-network:
        ipv4_address: 192.168.88.4
#    volumes:
#      - $USERHOME/docker/unbound:/opt/unbound/etc/unbound/
    ports:
      - 53/tcp
      - 53/udp
##
##____________________ Unifi Controller [NETWORK/Wifi]
  unifi:
    container_name: unifi
    image: goofball222/unifi
    mac_address: d0:ca:ab:cd:ef:03
    networks:
      DNS-network:
        ipv4_address: 192.168.88.5
    restart: unless-stopped
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - $USERHOME/docker/unifi/cert:/usr/lib/unifi/cert
      - $USERHOME/docker/unifi/data:/usr/lib/unifi/data
      - $USERHOME/docker/unifi/logs:/usr/lib/unifi/logs
    ports:
      - 3478:3478/udp
      - 8080:8080
      - 8443:8443
      - 8880:8880
      - 8843:8843
##
##________CLOUD________
##_____________________ Traefik [CLOUD/reverse-proxy
# create empty files and set permissions first see docker-config.sh
  traefik:
    image: traefik:v2.0
    container_name: traefik
    ports:
      - 8880:8080
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - $USERHOME/docker/traefik/acme.json:/acme.json
      - $USERHOME/docker/traefik/traefik.toml:/etc/traefik/traefik.toml
    restart: unless-stopped
##
##____________________ SyncThing [CLOUD/Sync]
  syncthing:
    container_name: syncthing
    image: linuxserver/syncthing
    restart: unless-stopped
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - UMASK_SET=022
    volumes:
      - $USERHOME/docker/syncthing/config:/config
      - /mnt/pool/Desktop:/desktop:rw
      - /mnt/pool/Downloads:/downloads:rw
      - /mnt/pool/Documents:/documents:rw
      - /mnt/pool/Users:/users:rw
    ports:
      - '8384:8384'
      - '21027:21027/udp'
      - '22000:22000'
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.syncthing-redirect.redirectscheme.scheme=https
      - traefik.http.routers.syncthing-redirect.entrypoints=web
      - traefik.http.routers.syncthing-redirect.middlewares=syncthing-redirect
      - traefik.http.routers.syncthing-redirect.rule=Host(`sync.$DOMAIN`)
      - traefik.http.routers.syncthing.entrypoints=websecure
      - traefik.http.routers.syncthing.rule=Host(`sync.obelix.xyz`)
      - traefik.http.routers.syncthing.tls.certresolver=letsencrypt
      - traefik.http.services.syncthing.loadbalancer.server.port=8384
#      - traefik.http.routers.syncthing-listen.rule=Host(`sync.$DOMAIN`) && Path(`/listen`)
#      - traefik.http.services.syncthing-listen.loadbalancer.server.port=22000
##
##____________________ Duplicati [CLOUD/Backup]
  duplicati:
    image: linuxserver/duplicati
    container_name: duplicati
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
#      - CLI_ARGS= #optional
    volumes:
      - $USERHOME/docker/duplicati/config:/config
      - /mnt/pool/Backups:/backups
      - /mnt/pool/Users:/source
    ports:
      - 8200:8200
    restart: unless-stopped
##
##____________________ MariaDB MySQL [CLOUD/Database]
  mariadb:
    image: mariadb:10.1
    container_name: mariadb
    environment:
      MYSQL_ROOT_PASSWORD: $PW_INT
      MYSQL_USER: $USER
      MYSQL_PASSWORD: $PW_INT
      MYSQL_DATABASE: filerundb
    volumes:
      - $USERHOME/docker/filerun/db:/var/lib/mysql
##
##____________________ FileRun [CLOUD/Files]
  filerun:
    image: afian/filerun
    container_name: filerun
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
      FR_DB_HOST: mariadb
      FR_DB_PORT: 3306
      FR_DB_NAME: filerundb
      FR_DB_USER: $USER
      FR_DB_PASS: $PW_INT
      APACHE_RUN_USER: www-data
      APACHE_RUN_USER_ID: 33
      APACHE_RUN_GROUP: www-data
      APACHE_RUN_GROUP_ID: 33
    depends_on:
      - mariadb
    links:
      - mariadb
      - filerun-tika
      - filerun-elasticsearch
    ports:
      - "8000:80"
    volumes:
      - $USERHOME/docker/filerun/html:/var/www/html
      - /mnt/pool/Users:/user-files:rw
      - /mnt/pool/Local:/local-files:rw
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.filerun-redirect.redirectscheme.scheme=https
      - traefik.http.routers.filerun-redirect.entrypoints=web
      - traefik.http.routers.filerun-redirect.middlewares=filerun-redirect
      - traefik.http.routers.filerun-redirect.rule=Host(`files.$DOMAIN`)
      - traefik.http.routers.filerun.entrypoints=websecure
      - traefik.http.routers.filerun.rule=Host(`files.$DOMAIN`)
      - traefik.http.routers.filerun.tls.certresolver=letsencrypt
      - traefik.http.services.filerun.loadbalancer.server.port=80
##____________________ FileRun Full-Text Search [CLOUD/Files search]
  filerun-tika:
    image: logicalspark/docker-tikaserver
    container_name: filerun-tika
  filerun-elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.2.4
    container_name: filerun-elasticsearch
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: 1g
    volumes:
      - $USERHOME/docker/filerun/esearch:/usr/share/elasticsearch/data
##
##_____________________ Firefox Sync [CLOUD/Browser] 
# generate secret.txt first see docker-config.sh
  firefox-syncserver:
    image: crazymax/firefox-syncserver:latest
    container_name: firefox_syncserver
    restart: always
    environment: 
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - FF_SYNCSERVER_PUBLIC_URL=https://firefox.$DOMAIN
      - FF_SYNCSERVER_SECRET_FILE=/data/secret/secret.txt
      - FF_SYNCSERVER_FORWARDED_ALLOW_IPS=*
      - FF_SYNCSERVER_FORCE_WSGI_ENVIRON=true
    volumes:
      - "$USERHOME/docker/firefox-syncserver:/data"
      - "$USERHOME/docker/firefox-syncserver/secret:/data/secret/"
    ports:
      - 5000:5000
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.firefox-redirect.redirectscheme.scheme=https
      - traefik.http.routers.firefox-redirect.entrypoints=web
      - traefik.http.routers.firefox-redirect.middlewares=firefox-redirect
      - traefik.http.routers.firefox-redirect.rule=Host(`firefox.$DOMAIN`)
      - traefik.http.routers.firefox.entrypoints=websecure
      - traefik.http.routers.firefox.rule=Host(`firefox.$DOMAIN`)
      - traefik.http.routers.firefox.tls.certresolver=letsencrypt
      - traefik.http.services.firefox.loadbalancer.server.port=5000
##________MEDIA________
##
##_____________________ Jellyfin [MEDIA/Library] 
  jellyfin:
    container_name: jellyfin
    image: linuxserver/jellyfin
    restart: unless-stopped
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - UMASK_SET=022 #optional
    volumes:
      - $USERHOME/docker/jellyfin/config:/config
      - /mnt/pool/Media/TVshows:/data/tvshows
      - /mnt/pool/Media/Movies:/data/movies
      - /mnt/pool/Music:/data/music
    ports:
      - 8096:8096
      - 8920:8920 #optional
    devices:
      - /dev/dri:/dev/dri
##
##____________________ vpn-proxy [MEDIA/vpn-client-for-media]
  vpn-proxy:
    container_name: vpn-proxy
    image: jeroenslot/nordvpn-proxy:latest
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
    dns:
      - 103.86.96.100
      - 103.86.99.100
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ovpn-data:/app/ovpn/config
    environment:
      - USERNAME=$USER_VPN
      - PASSWORD=$PW_MEDIA
      - LOCAL_NETWORK=192.168.88.0/24
      - COUNTRY=NL
      - PROTOCOL=udp
    networks:
      - default
    ports:
      - 8118:8118 #Privoxy
      - 8989:8989 #Sonarr
      - 7878:7878 #Radarr
      - 9117:9117 #Jackett
      - 6789:6789 #NZBget
      - 9091:9091 #Transmission
      - 6767:6767 #Subtitles
      - 51413:51413 #p2p
      - 51413:51413/udp #p2p DHT
    restart: always
##
##____________________ Transmission [MEDIA/download-client]
  transmission:
    image: linuxserver/transmission
    container_name: transmission
    network_mode: service:vpn-proxy
    depends_on:
      - vpn-proxy
    restart: unless-stopped
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - TRANSMISSION_WEB_HOME=/transmission-web-control/
      - USER=admin
      - PASS=$PW_MEDIA
    volumes:
      - $USERHOME/docker/transmission/config:/config
      - /mnt/pool/Media:/media
      - /mnt/pool/Media/incoming/blackhole:/watch
##
##____________________ NZBget [MEDIA/download-client]
  nzbget:
    container_name: nzbget
    image: linuxserver/nzbget:latest
    network_mode: service:vpn-proxy
    depends_on:
      - vpn-proxy
    restart: unless-stopped
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $USERHOME/docker/nzbget/config:/config
      - /mnt/pool/Media:/media
##
##____________________ Sonarr [MEDIA/PVR-TVshows]
  sonarr:
    container_name: sonarr
    image: linuxserver/sonarr:latest
    network_mode: service:vpn-proxy
    depends_on:
      - vpn-proxy
    restart: unless-stopped
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - $USERHOME/docker/sonarr/config:/config
      - /mnt/pool/Media:/media
##
##____________________ Jackett [MEDIA/torrent-proxy for Sonarr&Radarr]
  jackett:
    container_name: jackett
    image: linuxserver/jackett:latest
    network_mode: service:vpn-proxy
    depends_on:
      - vpn-proxy
    restart: unless-stopped
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $USERHOME/docker/jackett/config:/config
      - /etc/localtime:/etc/localtime:ro
      - /mnt/pool/Media:/media 
##
##____________________ Radarr [MEDIA/PVR-Movies]
  radarr:
    container_name: radarr
    image: linuxserver/radarr:latest
    network_mode: service:vpn-proxy
    depends_on:
      - vpn-proxy
    restart: unless-stopped
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - $USERHOME/docker/radarr/config:/config
      - /mnt/pool/Media:/media
##
##____________________ Bazarr [MEDIA/subtitle-proxy for Sonarr&Radarr]
  bazarr:
    container_name: bazarr
    image: linuxserver/bazarr
    network_mode: service:vpn-proxy
    depends_on:
      - vpn-proxy
    restart: unless-stopped
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - UMASK_SET=022 #optional
    volumes:
      - $USERHOME/docker/bazarr/config:/config
      - /mnt/pool/Media:/media
##
##______MANAGEMENT_____
##_____________________ Heimdall [Management/HOMEPAGE] 
  heimdall:
    container_name: heimdall
    image: linuxserver/heimdall:latest
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    ports:
     - "8080:80"
    volumes:
      - $USERHOME/docker/heimdall:/config
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
##
##____________________ Prometheus [Monitoring/Logging]
  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.18.1
    restart: always
    environment:
      - TZ=$TZ
    volumes:
      - $USERHOME/docker/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - monitor-net
##____________________ Alertmanager [Monitoring/Alerts]
  prometheus-alertmanager:
    container_name: prometheus-alertmanager
    image: prom/alertmanager:v0.20.0
    restart: always
    environment:
      - TZ=$TZ
    volumes:
      - $USERHOME/docker/prometheus/alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    ports:
      - "9093:9093"
    networks:
      - monitor-net
##____________________ Nodes [Monitoring/]
  nodeexporter:
    image: prom/node-exporter:v0.18.1
    container_name: nodeexporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    ports:
      - "9100:9100"
    networks:
      - monitor-net
##____________________ Cadvisor [Monitoring/Docker]
  cadvisor:
    image: gcr.io/google-containers/cadvisor:v0.36.0
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /cgroup:/cgroup:ro 
    restart: unless-stopped
    ports:
      - "9180:8080"
    networks:
      - monitor-net
##____________________ Pushgateway [Monitoring/Pushgateway]
  pushgateway:
    image: prom/pushgateway:v1.2.0
    container_name: pushgateway
    restart: unless-stopped
    ports:
      - 9191:9091
    networks:
      - monitor-net
##____________________ Grafana [Monitoring/Dashboard]
  grafana:
    container_name: grafana
    image: grafana/grafana:7.0.3
    restart: always
    environment:
      - TZ=${TZ}
      - GF_SECURITY_ADMIN_USER=${USER}
      - GF_SECURITY_ADMIN_PASSWORD=${PW_EXT}
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=smtp_relay:25
      - GF_SMTP_FROM_ADDRESS=${EMAIL}
#      - GF_SERVER_DOMAIN=grafana.$DOMAIN
#      - GF_SERVER_ROOT_URL=https://grafana.$DOMAIN
#      - VIRTUAL_HOST=grafana.$DOMAIN
#      - VIRTUAL_PORT=3000
#      - VIRTUAL_PROTO=http
#      - LETSENCRYPT_HOST=grafana.$DOMAIN
#      - LETSENCRYPT_EMAIL=${EMAIL}
    volumes:
#      - grafana_data:/var/lib/grafana
      - $USERHOME/docker/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    networks:
      - monitor-net
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.grafana-redirect.redirectscheme.scheme=https
      - traefik.http.routers.grafana-redirect.entrypoints=web
      - traefik.http.routers.grafana-redirect.middlewares=grafana-redirect
      - traefik.http.routers.grafana-redirect.rule=Host(`grafana.$DOMAIN`)
      - traefik.http.routers.grafana.entrypoints=websecure
      - traefik.http.routers.grafana.rule=Host(`grafana.$DOMAIN`)
      - traefik.http.routers.grafana.tls.certresolver=letsencrypt
      - traefik.http.services.grafana.loadbalancer.server.port=3000
##
##____________________ SMTP-relay [Management/email]
  smtp:
    image: namshi/smtp
    container_name: smtp_relay
    restart: always
    ports:
      - "25:25"
    environment:
      - RELAY_NETWORKS=192.168.88.0/24:192.168.0.0/24:10.0.0.0/16
#
#
#
volumes:
  ovpn-data:
  firefox-syncserver:
  prometheus_data: {}
  grafana_data: {}
#
#
#
networks:
  DNS-network:
    driver: macvlan
    driver_opts:
      parent: eno1
    ipam:
      config:
        - subnet: 192.168.88.0/24
          gateway: 192.168.88.1
          ip_range: 192.168.88.0/29
          aux_addresses:
            router: 192.168.88.1
            PiHole-1: 192.168.88.2
  monitor-net:
    driver: bridge
